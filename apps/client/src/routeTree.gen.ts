/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as OrganizationsIndexImport } from './routes/organizations/index'
import { Route as OrganizationsOrganizationIdIndexImport } from './routes/organizations/$organizationId/index'
import { Route as OrganizationsOrganizationIdUsersIndexImport } from './routes/organizations/$organizationId/users/index'
import { Route as OrganizationsOrganizationIdUsersUserIdImport } from './routes/organizations/$organizationId/users/$userId'
import { Route as OrganizationsOrganizationIdActionsNewImport } from './routes/organizations/$organizationId/actions/new'
import { Route as OrganizationsOrganizationIdActionsEditImport } from './routes/organizations/$organizationId/actions/edit'
import { Route as OrganizationsOrganizationIdUsersUserIdNewImport } from './routes/organizations/$organizationId/users/$userId.new'
import { Route as OrganizationsOrganizationIdUsersUserIdEditImport } from './routes/organizations/$organizationId/users/$userId.edit'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrganizationsIndexRoute = OrganizationsIndexImport.update({
  id: '/organizations/',
  path: '/organizations/',
  getParentRoute: () => rootRoute,
} as any)

const OrganizationsOrganizationIdIndexRoute =
  OrganizationsOrganizationIdIndexImport.update({
    id: '/organizations/$organizationId/',
    path: '/organizations/$organizationId/',
    getParentRoute: () => rootRoute,
  } as any)

const OrganizationsOrganizationIdUsersIndexRoute =
  OrganizationsOrganizationIdUsersIndexImport.update({
    id: '/organizations/$organizationId/users/',
    path: '/organizations/$organizationId/users/',
    getParentRoute: () => rootRoute,
  } as any)

const OrganizationsOrganizationIdUsersUserIdRoute =
  OrganizationsOrganizationIdUsersUserIdImport.update({
    id: '/organizations/$organizationId/users/$userId',
    path: '/organizations/$organizationId/users/$userId',
    getParentRoute: () => rootRoute,
  } as any)

const OrganizationsOrganizationIdActionsNewRoute =
  OrganizationsOrganizationIdActionsNewImport.update({
    id: '/organizations/$organizationId/actions/new',
    path: '/organizations/$organizationId/actions/new',
    getParentRoute: () => rootRoute,
  } as any)

const OrganizationsOrganizationIdActionsEditRoute =
  OrganizationsOrganizationIdActionsEditImport.update({
    id: '/organizations/$organizationId/actions/edit',
    path: '/organizations/$organizationId/actions/edit',
    getParentRoute: () => rootRoute,
  } as any)

const OrganizationsOrganizationIdUsersUserIdNewRoute =
  OrganizationsOrganizationIdUsersUserIdNewImport.update({
    id: '/new',
    path: '/new',
    getParentRoute: () => OrganizationsOrganizationIdUsersUserIdRoute,
  } as any)

const OrganizationsOrganizationIdUsersUserIdEditRoute =
  OrganizationsOrganizationIdUsersUserIdEditImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => OrganizationsOrganizationIdUsersUserIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/organizations/': {
      id: '/organizations/'
      path: '/organizations'
      fullPath: '/organizations'
      preLoaderRoute: typeof OrganizationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/organizations/$organizationId/': {
      id: '/organizations/$organizationId/'
      path: '/organizations/$organizationId'
      fullPath: '/organizations/$organizationId'
      preLoaderRoute: typeof OrganizationsOrganizationIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/organizations/$organizationId/actions/edit': {
      id: '/organizations/$organizationId/actions/edit'
      path: '/organizations/$organizationId/actions/edit'
      fullPath: '/organizations/$organizationId/actions/edit'
      preLoaderRoute: typeof OrganizationsOrganizationIdActionsEditImport
      parentRoute: typeof rootRoute
    }
    '/organizations/$organizationId/actions/new': {
      id: '/organizations/$organizationId/actions/new'
      path: '/organizations/$organizationId/actions/new'
      fullPath: '/organizations/$organizationId/actions/new'
      preLoaderRoute: typeof OrganizationsOrganizationIdActionsNewImport
      parentRoute: typeof rootRoute
    }
    '/organizations/$organizationId/users/$userId': {
      id: '/organizations/$organizationId/users/$userId'
      path: '/organizations/$organizationId/users/$userId'
      fullPath: '/organizations/$organizationId/users/$userId'
      preLoaderRoute: typeof OrganizationsOrganizationIdUsersUserIdImport
      parentRoute: typeof rootRoute
    }
    '/organizations/$organizationId/users/': {
      id: '/organizations/$organizationId/users/'
      path: '/organizations/$organizationId/users'
      fullPath: '/organizations/$organizationId/users'
      preLoaderRoute: typeof OrganizationsOrganizationIdUsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/organizations/$organizationId/users/$userId/edit': {
      id: '/organizations/$organizationId/users/$userId/edit'
      path: '/edit'
      fullPath: '/organizations/$organizationId/users/$userId/edit'
      preLoaderRoute: typeof OrganizationsOrganizationIdUsersUserIdEditImport
      parentRoute: typeof OrganizationsOrganizationIdUsersUserIdImport
    }
    '/organizations/$organizationId/users/$userId/new': {
      id: '/organizations/$organizationId/users/$userId/new'
      path: '/new'
      fullPath: '/organizations/$organizationId/users/$userId/new'
      preLoaderRoute: typeof OrganizationsOrganizationIdUsersUserIdNewImport
      parentRoute: typeof OrganizationsOrganizationIdUsersUserIdImport
    }
  }
}

// Create and export the route tree

interface OrganizationsOrganizationIdUsersUserIdRouteChildren {
  OrganizationsOrganizationIdUsersUserIdEditRoute: typeof OrganizationsOrganizationIdUsersUserIdEditRoute
  OrganizationsOrganizationIdUsersUserIdNewRoute: typeof OrganizationsOrganizationIdUsersUserIdNewRoute
}

const OrganizationsOrganizationIdUsersUserIdRouteChildren: OrganizationsOrganizationIdUsersUserIdRouteChildren =
  {
    OrganizationsOrganizationIdUsersUserIdEditRoute:
      OrganizationsOrganizationIdUsersUserIdEditRoute,
    OrganizationsOrganizationIdUsersUserIdNewRoute:
      OrganizationsOrganizationIdUsersUserIdNewRoute,
  }

const OrganizationsOrganizationIdUsersUserIdRouteWithChildren =
  OrganizationsOrganizationIdUsersUserIdRoute._addFileChildren(
    OrganizationsOrganizationIdUsersUserIdRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/organizations': typeof OrganizationsIndexRoute
  '/organizations/$organizationId': typeof OrganizationsOrganizationIdIndexRoute
  '/organizations/$organizationId/actions/edit': typeof OrganizationsOrganizationIdActionsEditRoute
  '/organizations/$organizationId/actions/new': typeof OrganizationsOrganizationIdActionsNewRoute
  '/organizations/$organizationId/users/$userId': typeof OrganizationsOrganizationIdUsersUserIdRouteWithChildren
  '/organizations/$organizationId/users': typeof OrganizationsOrganizationIdUsersIndexRoute
  '/organizations/$organizationId/users/$userId/edit': typeof OrganizationsOrganizationIdUsersUserIdEditRoute
  '/organizations/$organizationId/users/$userId/new': typeof OrganizationsOrganizationIdUsersUserIdNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/organizations': typeof OrganizationsIndexRoute
  '/organizations/$organizationId': typeof OrganizationsOrganizationIdIndexRoute
  '/organizations/$organizationId/actions/edit': typeof OrganizationsOrganizationIdActionsEditRoute
  '/organizations/$organizationId/actions/new': typeof OrganizationsOrganizationIdActionsNewRoute
  '/organizations/$organizationId/users/$userId': typeof OrganizationsOrganizationIdUsersUserIdRouteWithChildren
  '/organizations/$organizationId/users': typeof OrganizationsOrganizationIdUsersIndexRoute
  '/organizations/$organizationId/users/$userId/edit': typeof OrganizationsOrganizationIdUsersUserIdEditRoute
  '/organizations/$organizationId/users/$userId/new': typeof OrganizationsOrganizationIdUsersUserIdNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/organizations/': typeof OrganizationsIndexRoute
  '/organizations/$organizationId/': typeof OrganizationsOrganizationIdIndexRoute
  '/organizations/$organizationId/actions/edit': typeof OrganizationsOrganizationIdActionsEditRoute
  '/organizations/$organizationId/actions/new': typeof OrganizationsOrganizationIdActionsNewRoute
  '/organizations/$organizationId/users/$userId': typeof OrganizationsOrganizationIdUsersUserIdRouteWithChildren
  '/organizations/$organizationId/users/': typeof OrganizationsOrganizationIdUsersIndexRoute
  '/organizations/$organizationId/users/$userId/edit': typeof OrganizationsOrganizationIdUsersUserIdEditRoute
  '/organizations/$organizationId/users/$userId/new': typeof OrganizationsOrganizationIdUsersUserIdNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/organizations'
    | '/organizations/$organizationId'
    | '/organizations/$organizationId/actions/edit'
    | '/organizations/$organizationId/actions/new'
    | '/organizations/$organizationId/users/$userId'
    | '/organizations/$organizationId/users'
    | '/organizations/$organizationId/users/$userId/edit'
    | '/organizations/$organizationId/users/$userId/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/organizations'
    | '/organizations/$organizationId'
    | '/organizations/$organizationId/actions/edit'
    | '/organizations/$organizationId/actions/new'
    | '/organizations/$organizationId/users/$userId'
    | '/organizations/$organizationId/users'
    | '/organizations/$organizationId/users/$userId/edit'
    | '/organizations/$organizationId/users/$userId/new'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/organizations/'
    | '/organizations/$organizationId/'
    | '/organizations/$organizationId/actions/edit'
    | '/organizations/$organizationId/actions/new'
    | '/organizations/$organizationId/users/$userId'
    | '/organizations/$organizationId/users/'
    | '/organizations/$organizationId/users/$userId/edit'
    | '/organizations/$organizationId/users/$userId/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  OrganizationsIndexRoute: typeof OrganizationsIndexRoute
  OrganizationsOrganizationIdIndexRoute: typeof OrganizationsOrganizationIdIndexRoute
  OrganizationsOrganizationIdActionsEditRoute: typeof OrganizationsOrganizationIdActionsEditRoute
  OrganizationsOrganizationIdActionsNewRoute: typeof OrganizationsOrganizationIdActionsNewRoute
  OrganizationsOrganizationIdUsersUserIdRoute: typeof OrganizationsOrganizationIdUsersUserIdRouteWithChildren
  OrganizationsOrganizationIdUsersIndexRoute: typeof OrganizationsOrganizationIdUsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  OrganizationsIndexRoute: OrganizationsIndexRoute,
  OrganizationsOrganizationIdIndexRoute: OrganizationsOrganizationIdIndexRoute,
  OrganizationsOrganizationIdActionsEditRoute:
    OrganizationsOrganizationIdActionsEditRoute,
  OrganizationsOrganizationIdActionsNewRoute:
    OrganizationsOrganizationIdActionsNewRoute,
  OrganizationsOrganizationIdUsersUserIdRoute:
    OrganizationsOrganizationIdUsersUserIdRouteWithChildren,
  OrganizationsOrganizationIdUsersIndexRoute:
    OrganizationsOrganizationIdUsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/organizations/",
        "/organizations/$organizationId/",
        "/organizations/$organizationId/actions/edit",
        "/organizations/$organizationId/actions/new",
        "/organizations/$organizationId/users/$userId",
        "/organizations/$organizationId/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/organizations/": {
      "filePath": "organizations/index.tsx"
    },
    "/organizations/$organizationId/": {
      "filePath": "organizations/$organizationId/index.tsx"
    },
    "/organizations/$organizationId/actions/edit": {
      "filePath": "organizations/$organizationId/actions/edit.tsx"
    },
    "/organizations/$organizationId/actions/new": {
      "filePath": "organizations/$organizationId/actions/new.tsx"
    },
    "/organizations/$organizationId/users/$userId": {
      "filePath": "organizations/$organizationId/users/$userId.tsx",
      "children": [
        "/organizations/$organizationId/users/$userId/edit",
        "/organizations/$organizationId/users/$userId/new"
      ]
    },
    "/organizations/$organizationId/users/": {
      "filePath": "organizations/$organizationId/users/index.tsx"
    },
    "/organizations/$organizationId/users/$userId/edit": {
      "filePath": "organizations/$organizationId/users/$userId.edit.tsx",
      "parent": "/organizations/$organizationId/users/$userId"
    },
    "/organizations/$organizationId/users/$userId/new": {
      "filePath": "organizations/$organizationId/users/$userId.new.tsx",
      "parent": "/organizations/$organizationId/users/$userId"
    }
  }
}
ROUTE_MANIFEST_END */
