/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LegalRouteImport } from './routes/legal/route'
import { Route as ProtectedRouteImport } from './routes/_protected/route'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as LegalTermsAndConditionsImport } from './routes/legal/terms-and-conditions'
import { Route as LegalPrivacyPolicyImport } from './routes/legal/privacy-policy'
import { Route as ProtectedDashboardImport } from './routes/_protected/dashboard'
import { Route as AuthRegisterImport } from './routes/_auth/register'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as ProtectedOrganizationsRouteImport } from './routes/_protected/organizations/route'
import { Route as ProtectedOrganizationsOrganizationIdIndexImport } from './routes/_protected/organizations/$organizationId/index'
import { Route as ProtectedOrganizationsOrganizationIdUsersIndexImport } from './routes/_protected/organizations/$organizationId/users/index'
import { Route as ProtectedOrganizationsOrganizationIdActionsNewImport } from './routes/_protected/organizations/$organizationId/actions/new'
import { Route as ProtectedOrganizationsOrganizationIdActionsEditImport } from './routes/_protected/organizations/$organizationId/actions/edit'
import { Route as ProtectedOrganizationsOrganizationIdUsersUserIdIndexImport } from './routes/_protected/organizations/$organizationId/users/$userId/index'
import { Route as ProtectedOrganizationsOrganizationIdUsersUserIdNewImport } from './routes/_protected/organizations/$organizationId/users/$userId/new'
import { Route as ProtectedOrganizationsOrganizationIdUsersUserIdEditImport } from './routes/_protected/organizations/$organizationId/users/$userId/edit'
import { Route as ProtectedOrganizationsOrganizationIdUsersUserIdConfirmImport } from './routes/_protected/organizations/$organizationId/users/$userId/confirm'

// Create/Update Routes

const LegalRouteRoute = LegalRouteImport.update({
  id: '/legal',
  path: '/legal',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRouteRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LegalTermsAndConditionsRoute = LegalTermsAndConditionsImport.update({
  id: '/terms-and-conditions',
  path: '/terms-and-conditions',
  getParentRoute: () => LegalRouteRoute,
} as any)

const LegalPrivacyPolicyRoute = LegalPrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => LegalRouteRoute,
} as any)

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

const ProtectedOrganizationsRouteRoute =
  ProtectedOrganizationsRouteImport.update({
    id: '/organizations',
    path: '/organizations',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)

const ProtectedOrganizationsOrganizationIdIndexRoute =
  ProtectedOrganizationsOrganizationIdIndexImport.update({
    id: '/$organizationId/',
    path: '/$organizationId/',
    getParentRoute: () => ProtectedOrganizationsRouteRoute,
  } as any)

const ProtectedOrganizationsOrganizationIdUsersIndexRoute =
  ProtectedOrganizationsOrganizationIdUsersIndexImport.update({
    id: '/$organizationId/users/',
    path: '/$organizationId/users/',
    getParentRoute: () => ProtectedOrganizationsRouteRoute,
  } as any)

const ProtectedOrganizationsOrganizationIdActionsNewRoute =
  ProtectedOrganizationsOrganizationIdActionsNewImport.update({
    id: '/$organizationId/actions/new',
    path: '/$organizationId/actions/new',
    getParentRoute: () => ProtectedOrganizationsRouteRoute,
  } as any)

const ProtectedOrganizationsOrganizationIdActionsEditRoute =
  ProtectedOrganizationsOrganizationIdActionsEditImport.update({
    id: '/$organizationId/actions/edit',
    path: '/$organizationId/actions/edit',
    getParentRoute: () => ProtectedOrganizationsRouteRoute,
  } as any)

const ProtectedOrganizationsOrganizationIdUsersUserIdIndexRoute =
  ProtectedOrganizationsOrganizationIdUsersUserIdIndexImport.update({
    id: '/$organizationId/users/$userId/',
    path: '/$organizationId/users/$userId/',
    getParentRoute: () => ProtectedOrganizationsRouteRoute,
  } as any)

const ProtectedOrganizationsOrganizationIdUsersUserIdNewRoute =
  ProtectedOrganizationsOrganizationIdUsersUserIdNewImport.update({
    id: '/$organizationId/users/$userId/new',
    path: '/$organizationId/users/$userId/new',
    getParentRoute: () => ProtectedOrganizationsRouteRoute,
  } as any)

const ProtectedOrganizationsOrganizationIdUsersUserIdEditRoute =
  ProtectedOrganizationsOrganizationIdUsersUserIdEditImport.update({
    id: '/$organizationId/users/$userId/edit',
    path: '/$organizationId/users/$userId/edit',
    getParentRoute: () => ProtectedOrganizationsRouteRoute,
  } as any)

const ProtectedOrganizationsOrganizationIdUsersUserIdConfirmRoute =
  ProtectedOrganizationsOrganizationIdUsersUserIdConfirmImport.update({
    id: '/$organizationId/users/$userId/confirm',
    path: '/$organizationId/users/$userId/confirm',
    getParentRoute: () => ProtectedOrganizationsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/legal': {
      id: '/legal'
      path: '/legal'
      fullPath: '/legal'
      preLoaderRoute: typeof LegalRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected/organizations': {
      id: '/_protected/organizations'
      path: '/organizations'
      fullPath: '/organizations'
      preLoaderRoute: typeof ProtectedOrganizationsRouteImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthRouteImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/legal/privacy-policy': {
      id: '/legal/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/legal/privacy-policy'
      preLoaderRoute: typeof LegalPrivacyPolicyImport
      parentRoute: typeof LegalRouteImport
    }
    '/legal/terms-and-conditions': {
      id: '/legal/terms-and-conditions'
      path: '/terms-and-conditions'
      fullPath: '/legal/terms-and-conditions'
      preLoaderRoute: typeof LegalTermsAndConditionsImport
      parentRoute: typeof LegalRouteImport
    }
    '/_protected/organizations/$organizationId/': {
      id: '/_protected/organizations/$organizationId/'
      path: '/$organizationId'
      fullPath: '/organizations/$organizationId'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdIndexImport
      parentRoute: typeof ProtectedOrganizationsRouteImport
    }
    '/_protected/organizations/$organizationId/actions/edit': {
      id: '/_protected/organizations/$organizationId/actions/edit'
      path: '/$organizationId/actions/edit'
      fullPath: '/organizations/$organizationId/actions/edit'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdActionsEditImport
      parentRoute: typeof ProtectedOrganizationsRouteImport
    }
    '/_protected/organizations/$organizationId/actions/new': {
      id: '/_protected/organizations/$organizationId/actions/new'
      path: '/$organizationId/actions/new'
      fullPath: '/organizations/$organizationId/actions/new'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdActionsNewImport
      parentRoute: typeof ProtectedOrganizationsRouteImport
    }
    '/_protected/organizations/$organizationId/users/': {
      id: '/_protected/organizations/$organizationId/users/'
      path: '/$organizationId/users'
      fullPath: '/organizations/$organizationId/users'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdUsersIndexImport
      parentRoute: typeof ProtectedOrganizationsRouteImport
    }
    '/_protected/organizations/$organizationId/users/$userId/confirm': {
      id: '/_protected/organizations/$organizationId/users/$userId/confirm'
      path: '/$organizationId/users/$userId/confirm'
      fullPath: '/organizations/$organizationId/users/$userId/confirm'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdUsersUserIdConfirmImport
      parentRoute: typeof ProtectedOrganizationsRouteImport
    }
    '/_protected/organizations/$organizationId/users/$userId/edit': {
      id: '/_protected/organizations/$organizationId/users/$userId/edit'
      path: '/$organizationId/users/$userId/edit'
      fullPath: '/organizations/$organizationId/users/$userId/edit'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdUsersUserIdEditImport
      parentRoute: typeof ProtectedOrganizationsRouteImport
    }
    '/_protected/organizations/$organizationId/users/$userId/new': {
      id: '/_protected/organizations/$organizationId/users/$userId/new'
      path: '/$organizationId/users/$userId/new'
      fullPath: '/organizations/$organizationId/users/$userId/new'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdUsersUserIdNewImport
      parentRoute: typeof ProtectedOrganizationsRouteImport
    }
    '/_protected/organizations/$organizationId/users/$userId/': {
      id: '/_protected/organizations/$organizationId/users/$userId/'
      path: '/$organizationId/users/$userId'
      fullPath: '/organizations/$organizationId/users/$userId'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdUsersUserIdIndexImport
      parentRoute: typeof ProtectedOrganizationsRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ProtectedOrganizationsRouteRouteChildren {
  ProtectedOrganizationsOrganizationIdIndexRoute: typeof ProtectedOrganizationsOrganizationIdIndexRoute
  ProtectedOrganizationsOrganizationIdActionsEditRoute: typeof ProtectedOrganizationsOrganizationIdActionsEditRoute
  ProtectedOrganizationsOrganizationIdActionsNewRoute: typeof ProtectedOrganizationsOrganizationIdActionsNewRoute
  ProtectedOrganizationsOrganizationIdUsersIndexRoute: typeof ProtectedOrganizationsOrganizationIdUsersIndexRoute
  ProtectedOrganizationsOrganizationIdUsersUserIdConfirmRoute: typeof ProtectedOrganizationsOrganizationIdUsersUserIdConfirmRoute
  ProtectedOrganizationsOrganizationIdUsersUserIdEditRoute: typeof ProtectedOrganizationsOrganizationIdUsersUserIdEditRoute
  ProtectedOrganizationsOrganizationIdUsersUserIdNewRoute: typeof ProtectedOrganizationsOrganizationIdUsersUserIdNewRoute
  ProtectedOrganizationsOrganizationIdUsersUserIdIndexRoute: typeof ProtectedOrganizationsOrganizationIdUsersUserIdIndexRoute
}

const ProtectedOrganizationsRouteRouteChildren: ProtectedOrganizationsRouteRouteChildren =
  {
    ProtectedOrganizationsOrganizationIdIndexRoute:
      ProtectedOrganizationsOrganizationIdIndexRoute,
    ProtectedOrganizationsOrganizationIdActionsEditRoute:
      ProtectedOrganizationsOrganizationIdActionsEditRoute,
    ProtectedOrganizationsOrganizationIdActionsNewRoute:
      ProtectedOrganizationsOrganizationIdActionsNewRoute,
    ProtectedOrganizationsOrganizationIdUsersIndexRoute:
      ProtectedOrganizationsOrganizationIdUsersIndexRoute,
    ProtectedOrganizationsOrganizationIdUsersUserIdConfirmRoute:
      ProtectedOrganizationsOrganizationIdUsersUserIdConfirmRoute,
    ProtectedOrganizationsOrganizationIdUsersUserIdEditRoute:
      ProtectedOrganizationsOrganizationIdUsersUserIdEditRoute,
    ProtectedOrganizationsOrganizationIdUsersUserIdNewRoute:
      ProtectedOrganizationsOrganizationIdUsersUserIdNewRoute,
    ProtectedOrganizationsOrganizationIdUsersUserIdIndexRoute:
      ProtectedOrganizationsOrganizationIdUsersUserIdIndexRoute,
  }

const ProtectedOrganizationsRouteRouteWithChildren =
  ProtectedOrganizationsRouteRoute._addFileChildren(
    ProtectedOrganizationsRouteRouteChildren,
  )

interface ProtectedRouteRouteChildren {
  ProtectedOrganizationsRouteRoute: typeof ProtectedOrganizationsRouteRouteWithChildren
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedOrganizationsRouteRoute:
    ProtectedOrganizationsRouteRouteWithChildren,
  ProtectedDashboardRoute: ProtectedDashboardRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface LegalRouteRouteChildren {
  LegalPrivacyPolicyRoute: typeof LegalPrivacyPolicyRoute
  LegalTermsAndConditionsRoute: typeof LegalTermsAndConditionsRoute
}

const LegalRouteRouteChildren: LegalRouteRouteChildren = {
  LegalPrivacyPolicyRoute: LegalPrivacyPolicyRoute,
  LegalTermsAndConditionsRoute: LegalTermsAndConditionsRoute,
}

const LegalRouteRouteWithChildren = LegalRouteRoute._addFileChildren(
  LegalRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/legal': typeof LegalRouteRouteWithChildren
  '/organizations': typeof ProtectedOrganizationsRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/legal/privacy-policy': typeof LegalPrivacyPolicyRoute
  '/legal/terms-and-conditions': typeof LegalTermsAndConditionsRoute
  '/organizations/$organizationId': typeof ProtectedOrganizationsOrganizationIdIndexRoute
  '/organizations/$organizationId/actions/edit': typeof ProtectedOrganizationsOrganizationIdActionsEditRoute
  '/organizations/$organizationId/actions/new': typeof ProtectedOrganizationsOrganizationIdActionsNewRoute
  '/organizations/$organizationId/users': typeof ProtectedOrganizationsOrganizationIdUsersIndexRoute
  '/organizations/$organizationId/users/$userId/confirm': typeof ProtectedOrganizationsOrganizationIdUsersUserIdConfirmRoute
  '/organizations/$organizationId/users/$userId/edit': typeof ProtectedOrganizationsOrganizationIdUsersUserIdEditRoute
  '/organizations/$organizationId/users/$userId/new': typeof ProtectedOrganizationsOrganizationIdUsersUserIdNewRoute
  '/organizations/$organizationId/users/$userId': typeof ProtectedOrganizationsOrganizationIdUsersUserIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/legal': typeof LegalRouteRouteWithChildren
  '/organizations': typeof ProtectedOrganizationsRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/legal/privacy-policy': typeof LegalPrivacyPolicyRoute
  '/legal/terms-and-conditions': typeof LegalTermsAndConditionsRoute
  '/organizations/$organizationId': typeof ProtectedOrganizationsOrganizationIdIndexRoute
  '/organizations/$organizationId/actions/edit': typeof ProtectedOrganizationsOrganizationIdActionsEditRoute
  '/organizations/$organizationId/actions/new': typeof ProtectedOrganizationsOrganizationIdActionsNewRoute
  '/organizations/$organizationId/users': typeof ProtectedOrganizationsOrganizationIdUsersIndexRoute
  '/organizations/$organizationId/users/$userId/confirm': typeof ProtectedOrganizationsOrganizationIdUsersUserIdConfirmRoute
  '/organizations/$organizationId/users/$userId/edit': typeof ProtectedOrganizationsOrganizationIdUsersUserIdEditRoute
  '/organizations/$organizationId/users/$userId/new': typeof ProtectedOrganizationsOrganizationIdUsersUserIdNewRoute
  '/organizations/$organizationId/users/$userId': typeof ProtectedOrganizationsOrganizationIdUsersUserIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/legal': typeof LegalRouteRouteWithChildren
  '/_protected/organizations': typeof ProtectedOrganizationsRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/legal/privacy-policy': typeof LegalPrivacyPolicyRoute
  '/legal/terms-and-conditions': typeof LegalTermsAndConditionsRoute
  '/_protected/organizations/$organizationId/': typeof ProtectedOrganizationsOrganizationIdIndexRoute
  '/_protected/organizations/$organizationId/actions/edit': typeof ProtectedOrganizationsOrganizationIdActionsEditRoute
  '/_protected/organizations/$organizationId/actions/new': typeof ProtectedOrganizationsOrganizationIdActionsNewRoute
  '/_protected/organizations/$organizationId/users/': typeof ProtectedOrganizationsOrganizationIdUsersIndexRoute
  '/_protected/organizations/$organizationId/users/$userId/confirm': typeof ProtectedOrganizationsOrganizationIdUsersUserIdConfirmRoute
  '/_protected/organizations/$organizationId/users/$userId/edit': typeof ProtectedOrganizationsOrganizationIdUsersUserIdEditRoute
  '/_protected/organizations/$organizationId/users/$userId/new': typeof ProtectedOrganizationsOrganizationIdUsersUserIdNewRoute
  '/_protected/organizations/$organizationId/users/$userId/': typeof ProtectedOrganizationsOrganizationIdUsersUserIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/legal'
    | '/organizations'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/legal/privacy-policy'
    | '/legal/terms-and-conditions'
    | '/organizations/$organizationId'
    | '/organizations/$organizationId/actions/edit'
    | '/organizations/$organizationId/actions/new'
    | '/organizations/$organizationId/users'
    | '/organizations/$organizationId/users/$userId/confirm'
    | '/organizations/$organizationId/users/$userId/edit'
    | '/organizations/$organizationId/users/$userId/new'
    | '/organizations/$organizationId/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/legal'
    | '/organizations'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/legal/privacy-policy'
    | '/legal/terms-and-conditions'
    | '/organizations/$organizationId'
    | '/organizations/$organizationId/actions/edit'
    | '/organizations/$organizationId/actions/new'
    | '/organizations/$organizationId/users'
    | '/organizations/$organizationId/users/$userId/confirm'
    | '/organizations/$organizationId/users/$userId/edit'
    | '/organizations/$organizationId/users/$userId/new'
    | '/organizations/$organizationId/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/legal'
    | '/_protected/organizations'
    | '/_auth/login'
    | '/_auth/register'
    | '/_protected/dashboard'
    | '/legal/privacy-policy'
    | '/legal/terms-and-conditions'
    | '/_protected/organizations/$organizationId/'
    | '/_protected/organizations/$organizationId/actions/edit'
    | '/_protected/organizations/$organizationId/actions/new'
    | '/_protected/organizations/$organizationId/users/'
    | '/_protected/organizations/$organizationId/users/$userId/confirm'
    | '/_protected/organizations/$organizationId/users/$userId/edit'
    | '/_protected/organizations/$organizationId/users/$userId/new'
    | '/_protected/organizations/$organizationId/users/$userId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  LegalRouteRoute: typeof LegalRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  LegalRouteRoute: LegalRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_protected",
        "/legal"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_protected": {
      "filePath": "_protected/route.tsx",
      "children": [
        "/_protected/organizations",
        "/_protected/dashboard"
      ]
    },
    "/legal": {
      "filePath": "legal/route.tsx",
      "children": [
        "/legal/privacy-policy",
        "/legal/terms-and-conditions"
      ]
    },
    "/_protected/organizations": {
      "filePath": "_protected/organizations/route.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/organizations/$organizationId/",
        "/_protected/organizations/$organizationId/actions/edit",
        "/_protected/organizations/$organizationId/actions/new",
        "/_protected/organizations/$organizationId/users/",
        "/_protected/organizations/$organizationId/users/$userId/confirm",
        "/_protected/organizations/$organizationId/users/$userId/edit",
        "/_protected/organizations/$organizationId/users/$userId/new",
        "/_protected/organizations/$organizationId/users/$userId/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.tsx",
      "parent": "/_protected"
    },
    "/legal/privacy-policy": {
      "filePath": "legal/privacy-policy.tsx",
      "parent": "/legal"
    },
    "/legal/terms-and-conditions": {
      "filePath": "legal/terms-and-conditions.tsx",
      "parent": "/legal"
    },
    "/_protected/organizations/$organizationId/": {
      "filePath": "_protected/organizations/$organizationId/index.tsx",
      "parent": "/_protected/organizations"
    },
    "/_protected/organizations/$organizationId/actions/edit": {
      "filePath": "_protected/organizations/$organizationId/actions/edit.tsx",
      "parent": "/_protected/organizations"
    },
    "/_protected/organizations/$organizationId/actions/new": {
      "filePath": "_protected/organizations/$organizationId/actions/new.tsx",
      "parent": "/_protected/organizations"
    },
    "/_protected/organizations/$organizationId/users/": {
      "filePath": "_protected/organizations/$organizationId/users/index.tsx",
      "parent": "/_protected/organizations"
    },
    "/_protected/organizations/$organizationId/users/$userId/confirm": {
      "filePath": "_protected/organizations/$organizationId/users/$userId/confirm.tsx",
      "parent": "/_protected/organizations"
    },
    "/_protected/organizations/$organizationId/users/$userId/edit": {
      "filePath": "_protected/organizations/$organizationId/users/$userId/edit.tsx",
      "parent": "/_protected/organizations"
    },
    "/_protected/organizations/$organizationId/users/$userId/new": {
      "filePath": "_protected/organizations/$organizationId/users/$userId/new.tsx",
      "parent": "/_protected/organizations"
    },
    "/_protected/organizations/$organizationId/users/$userId/": {
      "filePath": "_protected/organizations/$organizationId/users/$userId/index.tsx",
      "parent": "/_protected/organizations"
    }
  }
}
ROUTE_MANIFEST_END */
