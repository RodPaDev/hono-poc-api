import { boolean, pgTable, text, timestamp } from "drizzle-orm/pg-core";

/* * * * * * * * * *
 * !! DO NOT EDIT !!
 * This file is automatically generated by BetterAuth.
 * Unless you know what you're doing, you should not edit this file directly.
 *
 * NOTE: If you need to extend the core schema, please check the documentation:
 * https://www.better-auth.com/docs/concepts/database#extending-core-schema
 *
 * !! DO NOT EDIT !!
 * * * * * * * * * *
 */

export const user = pgTable("user", {
  // DO NOT EDIT START (these fields are required by BetterAuth)
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  emailVerified: boolean("email_verified")
    .$defaultFn(() => false)
    .notNull(),
  image: text("image"),
  createdAt: timestamp("created_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
  updatedAt: timestamp("updated_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
  // Admin Plugin (better-auth/plugins/admin)
  role: text("role"),
  banned: boolean("banned"),
  banReason: text("ban_reason"),
  banExpires: timestamp("ban_expires"),
  // DO NOT EDIT END
});

export const session = pgTable("session", {
  // DO NOT EDIT START (these fields are required by BetterAuth)
  id: text("id").primaryKey(),
  expiresAt: timestamp("expires_at").notNull(),
  token: text("token").notNull().unique(),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
  ipAddress: text("ip_address"),
  userAgent: text("user_agent"),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  // Organization Plugin (better-auth/plugins/organization)
  activeOrganizationId: text("active_organization_id"),
  // Admin Plugin (better-auth/plugins/admin)
  impersonatedBy: text("impersonated_by"),
  // DO NOT EDIT END
});

export const account = pgTable("account", {
  // DO NOT EDIT START (these fields are required by BetterAuth)
  id: text("id").primaryKey(),
  accountId: text("account_id").notNull(),
  providerId: text("provider_id").notNull(),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  accessToken: text("access_token"),
  refreshToken: text("refresh_token"),
  idToken: text("id_token"),
  accessTokenExpiresAt: timestamp("access_token_expires_at"),
  refreshTokenExpiresAt: timestamp("refresh_token_expires_at"),
  scope: text("scope"),
  password: text("password"),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
  // DO NOT EDIT END
});

export const verification = pgTable("verification", {
  // DO NOT EDIT START (these fields are required by BetterAuth)
  id: text("id").primaryKey(),
  identifier: text("identifier").notNull(),
  value: text("value").notNull(),
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at").$defaultFn(
    () => /* @__PURE__ */ new Date(),
  ),
  updatedAt: timestamp("updated_at").$defaultFn(
    () => /* @__PURE__ */ new Date(),
  ),
  // DO NOT EDIT END
});
